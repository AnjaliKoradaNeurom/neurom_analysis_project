import jsPDF from "jspdf"
import type { AuditResult } from "./audit-engine"

export async function generatePDFReport(auditResult: AuditResult) {
  const pdf = new jsPDF()
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()

  // Header
  pdf.setFontSize(24)
  pdf.setFont("helvetica", "bold")
  pdf.text("Neurom Website Checker", pageWidth / 2, 30, { align: "center" })

  pdf.setFontSize(14)
  pdf.setFont("helvetica", "normal")
  pdf.text("AI-Powered SEO & Performance Analysis", pageWidth / 2, 40, { align: "center" })

  // URL and Date
  pdf.setFontSize(12)
  pdf.text(`Website: ${auditResult.url}`, 20, 60)
  pdf.text(`Analysis Date: ${new Date(auditResult.timestamp).toLocaleDateString()}`, 20, 70)

  // Overall Score Section
  pdf.setFontSize(18)
  pdf.setFont("helvetica", "bold")
  pdf.text("Website Health Score", 20, 90)

  // Draw circular progress representation
  const centerX = pageWidth / 2
  const centerY = 120
  const radius = 25

  // Background circle
  pdf.setDrawColor(229, 231, 235)
  pdf.setLineWidth(8)
  pdf.circle(centerX, centerY, radius, "S")

  // Progress circle
  pdf.setDrawColor(59, 130, 246)
  pdf.setLineWidth(6)
  const progressAngle = (auditResult.overallScore / 100) * 360
  pdf.circle(centerX, centerY, radius - 4, "S")

  // Score text
  pdf.setFontSize(32)
  pdf.setFont("helvetica", "bold")
  pdf.text(`${auditResult.overallScore}%`, centerX, centerY + 5, { align: "center" })

  // Module Scores
  let yPosition = 160
  pdf.setFontSize(16)
  pdf.setFont("helvetica", "bold")
  pdf.text("Module Breakdown", 20, yPosition)

  yPosition += 15
  pdf.setFontSize(12)
  pdf.setFont("helvetica", "normal")

  auditResult.modules.forEach((module, index) => {
    if (yPosition > pageHeight - 30) {
      pdf.addPage()
      yPosition = 30
    }

    const scoreColor = module.score >= 90 ? [34, 197, 94] : module.score >= 70 ? [234, 179, 8] : [239, 68, 68]

    pdf.text(`${module.name}:`, 20, yPosition)
    pdf.setTextColor(...scoreColor)
    pdf.setFont("helvetica", "bold")
    pdf.text(`${module.score}%`, 120, yPosition)
    pdf.setTextColor(0, 0, 0)
    pdf.setFont("helvetica", "normal")

    yPosition += 8
    pdf.setFontSize(10)
    const splitDescription = pdf.splitTextToSize(module.description, pageWidth - 40)
    pdf.text(splitDescription, 20, yPosition)
    yPosition += splitDescription.length * 4 + 8
    pdf.setFontSize(12)
  })

  // Recommendations Section
  if (yPosition > pageHeight - 50) {
    pdf.addPage()
    yPosition = 30
  }

  yPosition += 10
  pdf.setFontSize(16)
  pdf.setFont("helvetica", "bold")
  pdf.text("Key Recommendations", 20, yPosition)

  yPosition += 15
  pdf.setFontSize(10)
  pdf.setFont("helvetica", "normal")

  auditResult.modules.forEach((module) => {
    const highPriorityRecs = module.recommendations.filter((rec) => rec.priority === "High")

    if (highPriorityRecs.length > 0) {
      if (yPosition > pageHeight - 40) {
        pdf.addPage()
        yPosition = 30
      }

      pdf.setFont("helvetica", "bold")
      pdf.text(`${module.name}:`, 20, yPosition)
      yPosition += 8

      highPriorityRecs.forEach((rec) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage()
          yPosition = 30
        }

        pdf.setFont("helvetica", "normal")
        pdf.text(`â€¢ ${rec.title}`, 25, yPosition)
        yPosition += 6

        const splitMessage = pdf.splitTextToSize(rec.message, pageWidth - 50)
        pdf.text(splitMessage, 30, yPosition)
        yPosition += splitMessage.length * 4 + 5
      })

      yPosition += 5
    }
  })

  // Footer
  const totalPages = pdf.getNumberOfPages()
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i)
    pdf.setFontSize(8)
    pdf.setFont("helvetica", "normal")
    pdf.text(`Generated by Neurom Website Checker - Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, {
      align: "center",
    })
  }

  // Save the PDF
  const fileName = `neurom-audit-${auditResult.url.replace(/[^a-zA-Z0-9]/g, "-")}-${new Date().toISOString().split("T")[0]}.pdf`
  pdf.save(fileName)
}
